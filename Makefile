# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: vhacman <vhacman@student.42roma.it>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/03/24 10:15:55 by vhacman           #+#    #+#              #
#    Updated: 2025/03/24 12:50:12 by vhacman          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# ======================== üéØ TARGETS ====================== #
NAME		= pipex			# The name of the final executable

# ====================== ‚öôÔ∏è COMPILER FLAGS ================== #
CC			= gcc			# The compiler to use
# -Wall     : enable all warnings
# -Wextra   : enable extra warnings
# -Werror   : treat warnings as errors
# -gdwarf-4 : include debug symbols in DWARF v4 format
CFLAGS		= -Wall -Wextra -Werror -gdwarf-4

# Command to delete files
RM			= rm -f

# Silence output from recursive make calls
MAKEFLAGS	+= -s

# ===================== üìÅ DIRECTORY PATHS =================== #
SRC_DIR		= src
OBJ_DIR		= obj
INC_DIR		= includes
LIBFT_DIR	= libft
MAIN_DIR	= main
UTILS_DIR	= utils

# =================== üìö LIBRARIES ========================= #
# Path to the compiled libft static library
LIBFT_A		= $(LIBFT_DIR)/libft.a

# ==================== üß© SOURCES ========================== #
SRCS = $(MAIN_DIR)/main.c \
	   $(SRC_DIR)/pipex.c \
	   $(UTILS_DIR)/exec_utils.c \
	   $(UTILS_DIR)/path_utils.c \
	   $(UTILS_DIR)/errors.c

# List of object files corresponding to source files
# Example: main/main.c ‚Üí obj/main/main.o
OBJS = $(patsubst %.c, $(OBJ_DIR)/%.o, $(SRCS))

# ========================== üõ†Ô∏è RULES ====================== #
# Default target: build the program
all: $(NAME)

# Link the object files and libft to create the final executable
$(NAME): $(LIBFT_A) $(OBJS)
	@$(CC) $(CFLAGS) -I$(INC_DIR) -o $@ $^ $(LIBFT_A)
	@$(MAKE) echo

# Rule to compile each .c file into a .o file in obj/
# $< = source file, $@ = object file
$(OBJ_DIR)/%.o: %.c
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -I$(INC_DIR) -c $< -o $@	

# Build libft.a by running libft's Makefile
$(LIBFT_A):
	@$(MAKE) -C $(LIBFT_DIR) $(notdir $@)

# Remove object files, log, binary, and libft
clean:
	@make -s -C $(LIBFT_DIR) fclean --silent > /dev/null
	@$(RM) -r $(OBJ_DIR)
	@$(RM) valgrind.log $(NAME)
	@echo "‚ú® ·¥ò…™·¥ò·¥áx ·¥è ô ü…™·¥õ·¥á Ä·¥Ä·¥õ·¥á·¥Ö ·¥è ô·¥ä·¥á·¥Ñ·¥õÍú±  ü·¥è…¢Íú±  ô…™…¥·¥Ä Ä è ·¥Ä…¥·¥Ö  ü…™ ôÍú∞·¥õ·¥Ä ·¥°…™·¥ò·¥á·¥Ö. ‚ú®"

# Remove everything, including final binary
fclean: clean
	@$(RM) $(NAME)
	@echo "(‚åê‚ñ†_‚ñ†)üî• ·¥ò…™·¥ò·¥áx ·¥è ô ü…™·¥õ·¥á Ä·¥Ä·¥õ·¥á·¥Ö Íú∞·¥Ñ ü·¥á·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á. üí£"

# Rebuild from scratch
re: fclean all
	@echo "(‚òûÔæü„ÉÆÔæü)‚òû  Ä·¥á·¥Ñ·¥è·¥ç·¥ò…™ ü·¥á·¥Ö Íú∞ Ä·¥è·¥ç Íú±·¥Ñ Ä·¥Ä·¥õ·¥Ñ ú ·¥ò…™·¥ò·¥áx  Ä…™Íú±·¥áÍú± ·¥Ä…¢·¥Ä…™…¥!"

# **************************************************************************** #
#                             EXTRA TARGETS                                    #
# **************************************************************************** #

# Run the program under Valgrind for memory leak detection
valgrind:
	@echo "üß† …™…¥…™·¥õ…™·¥Ä ü…™·¥¢…™…¥…¢ …¥·¥á·¥ú Ä·¥Ä ü Íú±·¥Ñ·¥Ä…¥..."
	@echo "üîç  ü·¥Ä·¥ú…¥·¥Ñ ú…™…¥…¢ ·¥ò…™·¥ò·¥áx ·¥ú…¥·¥Ö·¥á Ä ·¥ç·¥á·¥ç·¥è Ä è Íú±·¥ú Ä·¥†·¥á…™ ü ü·¥Ä…¥·¥Ñ·¥á..."
	@valgrind --leak-check=full --track-fds=yes ./$(NAME) infile \"ls\" \"wc -l\" outfile > valgrind.log 2>&1
	@echo "‚úÖ ·¥ç·¥á·¥ç·¥è Ä è Íú±·¥Ñ·¥Ä…¥ ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á …¥·¥è Íú±·¥ú Ä·¥†…™·¥†·¥è ÄÍú±  ú·¥è·¥ò·¥áÍú∞·¥ú ü ü è ‚ò†Ô∏è"

# Fun success message
echo:
	@echo "·ë≠I·ë≠E·ô≠ ·ëïO·ó∞·ë≠I·í™E·ó™"

# Declare targets that aren't actual files
.PHONY: all clean fclean re valgrind echo
